""" Test where provided liquidity is less than 1 share """

from state_transformation_base import StateTransformationBaseTest, RUN_TIME, ONE_HOUR
from pytezos import MichelsonRuntimeError


class PrecisionExploitTest(StateTransformationBaseTest):

    def _start_measurement_and_then_close(self):

        # In the end: no one bets, starting measure:
        bets_close = self.default_event_params['betsCloseTime']
        period = self.default_event_params['measurePeriod']
        self.current_time = bets_close
        self.storage = self.check_start_measurement_succeed(sender=self.a)

        # Emulating callback:
        callback_values = {
            'currencyPair': self.currency_pair,
            'lastUpdate': self.current_time,
            'rate': 6_000_000
        }
        self.storage = self.check_start_measurement_callback_succeed(
            callback_values=callback_values,
            source=self.a,
            sender=self.oracle_address)

        # Closing event:
        self.current_time = bets_close + period
        self.storage = self.check_close_succeed(sender=self.a)

        # Emulating calback with price is increased 25%:
        callback_values = {
            'currencyPair': self.currency_pair,
            'lastUpdate': self.current_time,
            'rate': 7_500_000
        }
        self.storage = self.check_close_callback_succeed(
            callback_values=callback_values,
            source=self.a,
            sender=self.oracle_address)


    def test_precision_exploit(self):
        self.current_time = RUN_TIME
        self.id = self.storage['lastEventId']

        self.storage = self.check_new_event_succeed(
            event_params=self.default_event_params,
            amount=self.measure_start_fee + self.expiration_fee)

        # A provides 10k tez in liquidity with success:
        self.storage = self.check_provide_liquidity_succeed(
            participant=self.a,
            amount=10_000_000_000,
            expected_above_eq=1,
            expected_bellow=1)

        # B provides 10mutez in liquidity with success:
        self.check_provide_liquidity_fails_with(
            participant=self.b,
            amount=10,
            expected_above_eq=1,
            expected_bellow=1,
            msg_contains="Added liquidity is less than one share")

        self._start_measurement_and_then_close()

        # self.storage = self.check_withdraw_succeed(self.b, 10)
        self.storage = self.check_withdraw_succeed(self.a, 10_000_000_000)


    def test_zero_liquidity_to_one_pool(self):
        self.current_time = RUN_TIME
        self.id = self.storage['lastEventId']

        self.storage = self.check_new_event_succeed(
            event_params=self.default_event_params,
            amount=self.measure_start_fee + self.expiration_fee)

        # A provides 1 mutez in liquidity with no success:
        self.check_provide_liquidity_fails_with(
            participant=self.a,
            amount=1,
            expected_above_eq=1,
            expected_bellow=1,
            msg_contains="Zero liquidity provided")

        # A provides 100 mutez is succeed with ratio 1:19:
        self.check_provide_liquidity_succeed(
            participant=self.a,
            amount=100,
            expected_above_eq=1,
            expected_bellow=19)

        # A provides 9 mutez in liquidity with no success:
        # 0.05*9 in one pool and 0.95*9 in another:
        self.check_provide_liquidity_fails_with(
            participant=self.a,
            amount=9,
            expected_above_eq=1,
            expected_bellow=19,
            msg_contains="Zero liquidity provided")


    def test_bet_is_a_lot_higher(self):
        self.current_time = RUN_TIME
        self.id = self.storage['lastEventId']

        self.storage = self.check_new_event_succeed(
            event_params=self.default_event_params,
            amount=self.measure_start_fee + self.expiration_fee)

        # A provides 2 mutez in liquidity with success:
        self.storage = self.check_provide_liquidity_succeed(
            participant=self.a,
            amount=2,
            expected_above_eq=1,
            expected_bellow=1)

        # B bets 1 bln tez and wins:
        one_billion = 1_000_000_000_000_000
        self.storage = self.check_bet_succeed(
            participant=self.b,
            amount=one_billion,
            bet='aboveEq',
            minimal_win=one_billion)

        self._start_measurement_and_then_close()
        self.storage = self.check_withdraw_succeed(self.b, one_billion)
        self.storage = self.check_withdraw_succeed(self.a, 2)


    def test_bet_is_a_lot_higher_2(self):
        self.current_time = RUN_TIME
        self.id = self.storage['lastEventId']

        self.storage = self.check_new_event_succeed(
            event_params=self.default_event_params,
            amount=self.measure_start_fee + self.expiration_fee)

        # A provides 2 mutez in liquidity with success:
        self.storage = self.check_provide_liquidity_succeed(
            participant=self.a,
            amount=2,
            expected_above_eq=1,
            expected_bellow=1)

        # B bets 1 bln tez and loose:
        one_billion = 1_000_000_000_000_000
        self.storage = self.check_bet_succeed(
            participant=self.b,
            amount=one_billion,
            bet='bellow',
            minimal_win=one_billion)

        self._start_measurement_and_then_close()
        self.storage = self.check_withdraw_succeed(self.b, 0)
        self.storage = self.check_withdraw_succeed(self.a, one_billion + 2)
