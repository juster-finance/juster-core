""" Test where provided liquidity is less than 1 share """

from state_transformation_base import StateTransformationBaseTest, RUN_TIME, ONE_HOUR
from pytezos import MichelsonRuntimeError


class PrecisionExploitTest(StateTransformationBaseTest):

    def test_precision_exploit(self):
        self.current_time = RUN_TIME
        self.id = self.storage['lastEventId']

        self.storage = self.check_new_event_succeed(
            event_params=self.default_event_params,
            amount=self.measure_start_fee + self.expiration_fee)

        # A provides 10k tez in liquidity with success:
        self.storage = self.check_provide_liquidity_succeed(
            participant=self.a,
            amount=10_000_000_000,
            expected_above_eq=1,
            expected_bellow=1)

        # B provides 10mutez in liquidity with success:
        self.storage = self.check_provide_liquidity_succeed(
            participant=self.b,
            amount=10,
            expected_above_eq=1,
            expected_bellow=1)

        # In the end: no one bets, starting measure:
        bets_close = self.default_event_params['betsCloseTime']
        period = self.default_event_params['measurePeriod']
        self.current_time = bets_close
        self.storage = self.check_start_measurement_succeed(sender=self.a)

        # Emulating callback:
        callback_values = {
            'currencyPair': self.currency_pair,
            'lastUpdate': self.current_time,
            'rate': 6_000_000
        }
        self.storage = self.check_start_measurement_callback_succeed(
            callback_values=callback_values,
            source=self.a,
            sender=self.oracle_address)

        # Closing event:
        self.current_time = bets_close + period
        self.storage = self.check_close_succeed(sender=self.a)

        # Emulating calback with price is increased 25%:
        callback_values = {
            'currencyPair': self.currency_pair,
            'lastUpdate': self.current_time,
            'rate': 7_500_000
        }
        self.storage = self.check_close_callback_succeed(
            callback_values=callback_values,
            source=self.a,
            sender=self.oracle_address)

        # B withdraws all:
        self.storage = self.check_withdraw_succeed(self.b, 10)
        self.storage = self.check_withdraw_succeed(self.a, 10_000_000_000)
