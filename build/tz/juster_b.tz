{ parameter
    (or (or (or (nat %claimInsuranceCase) (nat %giveReward))
            (or (pair %insure
                   (pair (nat %lineId) (mutez %minimalRewardAmount))
                   (or %pool (unit %against) (unit %for)))
                (pair %newLine
                   (pair (pair (string %currencyPair) (nat %duration)) (pair (nat %fee) (nat %initAgainst)))
                   (pair (pair (nat %initFor) (nat %maxValue)) (nat %minValue)))))
        (or (pair %provideLiquidity
               (pair (nat %expectedAgainst) (nat %expectedFor))
               (pair (nat %lineId) (nat %maxSlippage)))
            (pair %removeLiquidity (nat %lineId) (nat %shares)))) ;
  storage
    (pair (pair (pair (big_map %agreements
                         nat
                         (pair (pair (pair (address %beneficiary) (timestamp %endTime))
                                     (pair (nat %lineId) (or %pool (unit %against) (unit %for))))
                               (mutez %rewardAmount)))
                      (big_map %depositedLiquidity
                         (pair address nat)
                         (pair (pair (mutez %deposited) (nat %providedAgainst))
                               (pair (nat %providedFor) (nat %shares)))))
                (pair (nat %feePrecision)
                      (big_map %lines
                         nat
                         (pair (pair (pair (pair (string %currencyPair) (nat %duration)) (pair (nat %fee) (bool %isClaimed)))
                                     (pair (pair (nat %maxValue) (nat %minValue)) (pair (nat %poolAgainst) (nat %poolFor))))
                               (nat %totalShares)))))
          (pair (pair (nat %nextAgreementId) (nat %nextLineId)) (nat %ratioPrecision))) ;
  code { LAMBDA
           mutez
           nat
           { PUSH mutez 1 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR } ;
         LAMBDA
           (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat)
           unit
           { CAR ;
             CAR ;
             CDR ;
             CDR ;
             IF { PUSH string "Insurance Case is claimed" ; FAILWITH } { UNIT } } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PAIR ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat)
                          unit)
                       (lambda mutez nat))
                 (pair (pair (pair (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat)
                                   nat)
                             (pair nat nat))
                       nat))
           (pair (pair mutez nat) (pair nat nat))
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP 3 ;
             DIG 6 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 5 ;
             DIG 4 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             CAR ;
             DUP 5 ;
             DUP 5 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIG 4 ;
             DUG 2 ;
             DUP ;
             DUP 3 ;
             COMPARE ;
             GT ;
             IF { SWAP ;
                  DUP 3 ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR }
                { DUP 3 ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR } ;
             SUB ;
             ABS ;
             COMPARE ;
             GT ;
             IF { PUSH string "Expected ratio very differs from current pool ratio" ;
                  FAILWITH }
                {} ;
             AMOUNT ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CDR ;
             CAR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { DROP } { SWAP ; DROP } ;
             DUP ;
             DUP 4 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             DUP 4 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             DUP 5 ;
             CAR ;
             CDR ;
             CDR ;
             CAR ;
             DUP 5 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIG 2 ;
             DIG 4 ;
             CDR ;
             DIG 4 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             PUSH nat 0 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             EQ ;
             IF { PUSH string "Added liquidity is less than one share" ; FAILWITH } {} ;
             PUSH nat 0 ;
             DUP 3 ;
             COMPARE ;
             EQ ;
             PUSH nat 0 ;
             DUP 5 ;
             COMPARE ;
             EQ ;
             OR ;
             IF { PUSH string "Expected ratio in pool should be more than zero" ; FAILWITH }
                {} ;
             DIG 2 ;
             PAIR ;
             SWAP ;
             AMOUNT ;
             PAIR ;
             PAIR } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair (pair (pair (big_map nat (pair (pair (pair address timestamp) (pair nat (or unit unit))) mutez))
                                   (big_map (pair address nat) (pair (pair mutez nat) (pair nat nat))))
                             (pair nat
                                   (big_map
                                      nat
                                      (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat))))
                       (pair (pair nat nat) nat))
                 nat)
           (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat)
           { UNPAIR ;
             CAR ;
             CDR ;
             CDR ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "Line is not found" ; FAILWITH } {} } ;
         DUP ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair (pair (big_map nat (pair (pair (pair address timestamp) (pair nat (or unit unit))) mutez))
                                            (big_map (pair address nat) (pair (pair mutez nat) (pair nat nat))))
                                      (pair nat
                                            (big_map
                                               nat
                                               (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat))))
                                (pair (pair nat nat) nat))
                          nat)
                    (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat))
                 (pair (pair (pair (pair (pair (big_map nat (pair (pair (pair address timestamp) (pair nat (or unit unit))) mutez))
                                               (big_map (pair address nat) (pair (pair mutez nat) (pair nat nat))))
                                         (pair nat
                                               (big_map
                                                  nat
                                                  (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat))))
                                   (pair (pair nat nat) nat))
                             nat)
                       (pair (pair mutez nat) (pair nat nat))))
           (pair (pair (pair (big_map nat (pair (pair (pair address timestamp) (pair nat (or unit unit))) mutez))
                             (big_map (pair address nat) (pair (pair mutez nat) (pair nat nat))))
                       (pair nat
                             (big_map
                                nat
                                (pair (pair (pair (pair string nat) (pair nat bool)) (pair (pair nat nat) (pair nat nat))) nat))))
                 (pair (pair nat nat) nat))
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUP ;
             CDR ;
             DUP 5 ;
             CDR ;
             CAR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             ADD ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             CAR ;
             PAIR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             DUP 6 ;
             CAR ;
             CDR ;
             DUP 4 ;
             CAR ;
             CDR ;
             CDR ;
             CAR ;
             ADD ;
             PAIR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             DIG 2 ;
             DUP 5 ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             DUP 3 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             SWAP ;
             SENDER ;
             PAIR ;
             DUP ;
             DUP 3 ;
             CAR ;
             CAR ;
             CDR ;
             SWAP ;
             GET ;
             IF_NONE
               { PUSH nat 0 ; PUSH nat 0 ; PAIR ; PUSH nat 0 ; PUSH mutez 0 ; PAIR ; PAIR }
               {} ;
             DUP 3 ;
             CDR ;
             DUP 4 ;
             CAR ;
             CDR ;
             DUP 5 ;
             CAR ;
             CAR ;
             CDR ;
             DUP 7 ;
             CDR ;
             CDR ;
             DUP 5 ;
             CDR ;
             CDR ;
             ADD ;
             DUP 8 ;
             CDR ;
             CAR ;
             DUP 6 ;
             CDR ;
             CAR ;
             ADD ;
             PAIR ;
             DUP 8 ;
             CAR ;
             CDR ;
             DUP 6 ;
             CAR ;
             CDR ;
             ADD ;
             DIG 8 ;
             CAR ;
             CAR ;
             DIG 6 ;
             CAR ;
             CAR ;
             ADD ;
             PAIR ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             DIG 3 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             PAIR } ;
         SWAP ;
         APPLY ;
         DIG 5 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DROP 5 ;
                 IF_LEFT { DROP ; NIL operation ; PAIR } { DROP ; NIL operation ; PAIR } }
               { IF_LEFT
                   { DIG 2 ;
                     DIG 4 ;
                     DROP 2 ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DUP 3 ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "No xtz provided" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     IF_LEFT
                       { DROP ; DUP ; CAR ; CDR ; CDR ; CDR }
                       { DROP ; DUP ; CAR ; CDR ; CDR ; CAR } ;
                     AMOUNT ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     DUP 5 ;
                     CDR ;
                     IF_LEFT
                       { DROP ; DUP 4 ; CAR ; CDR ; CDR ; CAR }
                       { DROP ; DUP 4 ; CAR ; CDR ; CDR ; CDR } ;
                     ADD ;
                     DUP ;
                     DUP 4 ;
                     DUP 4 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP 7 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP 6 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP 9 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SUB ;
                     ABS ;
                     DIG 2 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "Wrong winDeltaCut" ; FAILWITH } {} ;
                     DUP ;
                     DIG 4 ;
                     SUB ;
                     ABS ;
                     SWAP ;
                     DIG 3 ;
                     ADD ;
                     PUSH mutez 1 ;
                     SWAP ;
                     MUL ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Wrong minimalRewardAmount" ; FAILWITH } {} ;
                     DUP 6 ;
                     CDR ;
                     DUP 7 ;
                     CAR ;
                     CDR ;
                     DUP 8 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DUP 9 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIG 4 ;
                     DUP 9 ;
                     CDR ;
                     DUP 10 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     DUP 9 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     INT ;
                     NOW ;
                     ADD ;
                     SENDER ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DIG 9 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 6 ;
                     CDR ;
                     DUP 8 ;
                     CDR ;
                     IF_LEFT { DROP ; DUP 5 } { DROP ; DUP 6 } ;
                     DUP 8 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DUP 8 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 7 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DUP 9 ;
                     CDR ;
                     IF_LEFT { DIG 7 ; DROP 2 ; DIG 6 } { DIG 8 ; DROP 2 ; DIG 6 } ;
                     PAIR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR }
                   { DIG 3 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "Fee > 100%" ; FAILWITH } {} ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PAIR ;
                     DUP 3 ;
                     CDR ;
                     CDR ;
                     DUP 4 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     PUSH bool False ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DUP 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DUP 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DUP 3 ;
                     CDR ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 3 ;
                     DUP 6 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CDR ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PAIR ;
                     DIG 4 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     EXEC ;
                     DUP ;
                     CDR ;
                     CDR ;
                     PUSH nat 1 ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     ADD ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } } }
           { DIG 5 ;
             DIG 6 ;
             DROP 2 ;
             IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 DUP 4 ;
                 CDR ;
                 CAR ;
                 DUP 6 ;
                 PAIR ;
                 DIG 7 ;
                 SWAP ;
                 EXEC ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 EXEC ;
                 NIL operation ;
                 PAIR }
               { DIG 2 ; DIG 3 ; DIG 4 ; DROP 4 ; NIL operation ; PAIR } } } }

